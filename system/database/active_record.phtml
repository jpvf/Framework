<?php if ( ! defined('BASE')) exit('Acceso directo prohibido');


class active_record
{

    var $result;
    protected $result_object;

    private $join     = array();
    private $select   = '';
    private $from     = '';
    private $where    = '';
    private $group_by = '';
    private $having   = '';
    private $order_by = '';
    private $limit    = ''; 
    private $data     = array();
            
    
    function get($table = '', $limit = '', $where = '')
    {

        if ($this->select == '')
        {        
            $this->select('*');
        }

        if ($table != '')
        {
            $this->from($table);
        }

        if ($where != '')
        {
            $this->where($where);
        }

        if ($limit != '')
        {
            $this->limit($limit);
        }

        return $this->query();
    }

    function set($key = '', $val = '', $escape = TRUE)
    {
        $this->data[$this->_protect_identifiers($key)] = ($escape === TRUE) ? "'$val'" : $val;
        return $this;   
    }

    private function _set_values($values = array())
    {
        if (count($values) > 0)
        {          
            foreach ($values as $key => $val)
            {
                $this->set($key , $val);
            }  
        }            
    }

    private function _protect_identifiers($val = '')
    {
        $val = trim($val);

        if (strpos($val, '.') !== FALSE)
        {
            $alias = '';
            if (stripos($val, ' as ') !== FALSE)
            {
                list($val, $alias) = explode(' as ', $val );       
                $alias = " as `$alias`";
            }
            $values = explode('.', $val);
            $protected = '`' . implode('`.`' , $values) . '`' . $alias;
        }
        else
        {
            $protected = '`' . $val . '`';
        }

        return $protected;
    }
    
    function insert($values = array(), $tabla = '')
    {
        $this->_set_values($values);

        if (count($this->data) == 0)
        {
            return FALSE;    
        }

        $tabla = $this->_protect_identifiers($tabla);

        $sql = "INSERT INTO $tabla \n";
        $sql .= "(" . implode(',' , array_keys($this->data)) . ") \n";
        $sql .= "VALUES \n";
        $sql .= "(" . implode(",", $this->data) . ") \n";

        $this->_reset_query();        
        return $this->query($sql);
    }
    
    function update($values = array(), $tabla = '', $where = '')
    {
        $this->_set_values($values);

        if (count($this->data) == 0)
        {
            return FALSE;
        }

        $values = array();

        foreach ($this->data as $key => $val)
        {
            $values[] = $key . ' = ' . $val;
        }
        
        $sql = "UPDATE $tabla \n SET ";
        
        $sql .= implode(", \n", $values);
        
        if ($where != '' OR $this->where != '')
        {
            $this->where($where);

            $sql .= " \n WHERE " . $this->where . "\n";
        }
        
        $this->_reset_query();
        
        return $this->query($sql);    
    }
    
    function select($select = '*')
    {       
        if (is_string($select))
        {
            if (strpos($select,',') !== FALSE)
            {
                $select = explode(',', $select);
            }
            else{
                $select = array($select);
            }
        }

        $items = array();

        foreach ($select as $item)
        {
            if (strpos($item, '*') !== FALSE)
            {
                if (strpos($item, '.') !== FALSE)
                {
                    list($table, $field) = explode('.', $item);
                    $item = $this->_protect_identifiers($table) . '.' . $field;
                }
                $items[] = $item;
            }
            else
            {
                $items[] = $this->_protect_identifiers($item);
            }
        }
        
        $select = implode(", ", $items);
        $this->select = $select;
        return $this;
    }    

    function from($from = '')
    {
        $this->from = "($from)";
        return $this;
    }

    function join($join_table = '', $on = '', $type = '')
    {        
        if ($join_table != '')
        {
            $join_table   = $this->_protect_identifiers($join_table);

            $on = $this->_protect_join($on);

            $this->join[] = strtoupper($type) . " JOIN $join_table ON ( $on )";
        }     
        return $this;         
    }

    private function _protect_join($on)
    {
        if (preg_match('/([\w\.]+)([\W\s]+)(.+)/', $on, $match))
        {
            if (stripos($match[3], ' AND ') !== FALSE)
            {
                list($last_match , $match_and) = explode(' AND ', $match[3]);
                $final_match = $this->_protect_join($match_and);
                $match[3] = $this->_protect_identifiers($last_match) . ' AND ' . $final_match;
            }
            elseif (stripos($match[3], ' OR ') !== FALSE)
            {
                list($last_match , $match_and) = explode(' OR ', $match[3]);
                $final_match = $this->_protect_join($match_and);
                $match[3] = $this->_protect_identifiers($last_match) . ' OR ' . $final_match;
            }
            else
            {
                $match[3] = $this->_protect_identifiers($match[3]);
            }
            $match[1] = $this->_protect_identifiers($match[1]);
        
            $on = $match[1].$match[2].$match[3];      
        }
        return $on;
    }

    function where($where = '')
    {
        if (is_string($where))
        {                    
            if ($this->where == '')
            {
                $this->where = "";
            }
            
            $this->where .= $where;
                       
        }        
        if (is_array($where))
        {
            $vars = array();
            
            foreach ($where as $key => $value)
            {
                if ( ! is_numeric($value))
                {
                     $value = "'$value'";                       
                }

                if ( ! $this->_tiene_operador($key) )
                {
                    $key = "$key =" ;                  
                }

                $key = $this->_protect_identifiers($key);
                $vars[] = "$key $value";
            }
            $this->where = implode(' AND ', $vars);    
        }
        return $this;
    }    

    

    function group_by($group_by = '')
    {
        if ( ! is_array($group_by))
        {
            if (strpos($group_by, ',') !== FALSE)
            {
                $group_by = explode(',', $group_by);
            }
            else
            {
                $group_by = array($group_by);
            }       
        }        

        $this->group_by = implode(",", $group_by);     
        return $this;   
    }    

    function order_by($order_by = '', $order = '')
    {
        if ( ! is_array($order_by))
        {

            if (strpos($order_by, 'ASC') !== FALSE)
            {
                $order_by = str_ireplace('ASC', '', $order_by);                
            }

            if (strpos($order_by, 'DESC') !== FALSE)
            {
                $order    = 'DESC';
                $order_by = str_ireplace('DESC', '', $order_by);                
            }

            if (strpos($order_by, ',') !== FALSE)
            {
                $order_by = explode(',', $order_by);
            }
            else
            {
                $order_by = array($order_by);
            }       
        }        

        $this->order_by = implode(",", $order_by) . "$order"; 
        return $this;
    }

    

    public function having($having)
    {
        $this->having = $having;
        return $this;
    }   

    public function limit($limit = '', $offset = '')
    {        
        if ($offset != '')
        {
            $offset = ', ' . $offset;
        }

        $this->limit = "$limit $offset";

        return $this;
    }

    protected function get_sql()
    {
        $this->sql = '';

        if ($this->select != '')
        {
            $this->sql .= "SELECT {$this->select} \n ";
        }

        if ($this->from != '')
        {
            $this->sql .= "FROM {$this->from} \n";
        }

        if ($this->join != '')
        {
            $this->sql .= implode("\n", $this->join ) . "\n";
        }
           
        if ($this->where != '')
        {
            $this->sql .= "WHERE {$this->where} \n";
        }

        if ($this->group_by != '')
        {
            $this->sql .= "GROUP BY {$this->group_by} \n ";
        }

        if ($this->having != '')
        {
            $this->sql .= "HAVING {$this->having} \n";
        }

        if ($this->order_by != '')
        {
            $this->sql .= "ORDER BY {$this->order_by} \n";
        }

        if ($this->limit != '')
        {
            $this->sql .= "LIMIT {$this->limit} \n";
        }
        
        $this->_reset_query();

        return  $this->sql;
    }

    private function _reset_query()
    {               
        $this->select = '';
        $this->from = '';
        $this->where = '';
        $this->join = '';
        $this->group_by = '';
        $this->having = '';
        $this->order_by = '';
        $this->limit = '';        
        $this->data = array();
    }

    private function _tiene_operador($str)
    {
        $str = trim($str);

        if ( ! preg_match("/(\s|<|>|!|=|is null|is not null)/i", $str))
        {
            return FALSE;
        }

        return TRUE;
    }
}